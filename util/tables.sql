drop database kyte;
create database kyte;
use kyte;

CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL, `password` VARCHAR(255) NOT NULL, `name` VARCHAR(255) NOT NULL, `username` VARCHAR(255) NOT NULL, `image` VARCHAR(255) NOT NULL, `birthday` DATETIME NOT NULL, `gender` VARCHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`)) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `posts` (`id` INTEGER NOT NULL auto_increment , `po_id` INTEGER NOT NULL, `post` VARCHAR(10000) NOT NULL, `public` CHAR(255) NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`po_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `relationships` (`id` INTEGER NOT NULL auto_increment , `user_one` INTEGER NOT NULL, `user_two` INTEGER NOT NULL, `status` SMALLINT NOT NULL, `action_user` INTEGER NOT NULL, `r_date` DATETIME NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`user_one`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`user_two`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `likes` (`u_id` INTEGER NOT NULL , `p_id` INTEGER NOT NULL , `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`u_id`, `p_id`), FOREIGN KEY (`u_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`p_id`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `notifications` (`id` INTEGER NOT NULL auto_increment , `u_id` INTEGER NOT NULL, `notif` VARCHAR(10000) NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`u_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `messages` (`id` INTEGER NOT NULL auto_increment , `s_id` INTEGER NOT NULL, `r_id` INTEGER NOT NULL, `seen` SMALLINT NOT NULL, `msg` VARCHAR(1000) NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`s_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`r_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER NOT NULL auto_increment , `com_id` INTEGER NOT NULL, `comment` VARCHAR(5000) NOT NULL, `reply` CHAR(255) NOT NULL, `p_id` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`com_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `reset_tokens` (`id` INTEGER NOT NULL auto_increment , `email` VARCHAR(255) NOT NULL, `token` VARCHAR(64) NOT NULL, `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`)) ENGINE=InnoDB;

DELIMITER $$
CREATE PROCEDURE likePost (IN postId int, IN userId int, IN notif varchar(255))
	BEGIN
		IF (SELECT exists (SELECT 1 FROM likes where p_id = postId and u_id = userId)) THEN
			DELETE FROM likes where p_id = postId and u_id = userId;
		ELSE
			INSERT into likes(p_id, u_id) values (postId, userId);
			INSERT into notifications(u_id, notif) values ((SELECT po_id from posts where id = postId), notif);
		END IF;
	END$$
DELIMITER ;